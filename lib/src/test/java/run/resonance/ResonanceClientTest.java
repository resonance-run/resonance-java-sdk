/*
 * This source file was generated by the Gradle 'init' task
 */
package run.resonance;

import org.junit.Test;

import okhttp3.HttpUrl;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;

import static org.junit.Assert.*;

import java.io.IOException;

import run.resonance.mocks.NestedCustomizationValues;
import run.resonance.mocks.TestCustomizationValues;
import run.resonance.mocks.TestUserData;

public class ResonanceClientTest {
    @Test
    public void getCustomizationsReturnsCustomization() {
        MockWebServer server = new MockWebServer();
        MockResponse response = new MockResponse()
                .addHeader("Content-Type", "application/json")
                .setBody(
                        "{ \"values\": { \"nest\": { \"greeting\": \"hi\" }, \"hello\": \"friends\" } }");

        server.enqueue(response);
        try {
            server.start();
            HttpUrl baseUrl = server.url("/");

            ResonanceClient<TestUserData> classUnderTest = new ResonanceClient<TestUserData>(baseUrl.toString(),
                    "a.fake.api.key", "a-fake-client-id");
            TestCustomizationValues defaultValue = new TestCustomizationValues(
                    new NestedCustomizationValues("Default greeting"), "Default hello");
            TestUserData userData = new TestUserData("123");
            TestCustomizationValues modalCustomization = classUnderTest.<TestCustomizationValues>getCustomizations(
                    userData,
                    "feed-promo",
                    "MODAL", defaultValue, TestCustomizationValues.class);

            assertEquals("friends", modalCustomization.hello);
            assertEquals("hi", modalCustomization.nest.greeting);

            server.shutdown();
        } catch (IOException exception) {
            assertEquals(false, true);
        }

    }

    @Test
    public void getCustomizationsReturnsDefaultIfNoCustomizationFound() {
        MockWebServer server = new MockWebServer();
        MockResponse response = new MockResponse()
                .addHeader("Content-Type", "application/json")
                .setBody(
                        "{ \"values\": undefined }");

        server.enqueue(response);
        try {
            server.start();
            HttpUrl baseUrl = server.url("/");

            ResonanceClient<TestUserData> classUnderTest = new ResonanceClient<TestUserData>(baseUrl.toString(),
                    "a.fake.api.key", "a-fake-client-id");
            TestCustomizationValues defaultValue = new TestCustomizationValues(
                    new NestedCustomizationValues("Default greeting"), "Default hello");
            TestCustomizationValues modalCustomization = classUnderTest.getCustomizations(new TestUserData("123"),
                    "feed-promo",
                    "MODAL", defaultValue, TestCustomizationValues.class);

            assertEquals("Default hello", modalCustomization.hello);

            server.shutdown();
        } catch (IOException exception) {
            assertEquals(false, true);
        }

    }
}
